//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeChecker implements GJVisitor<Type, Object> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Type visit(NodeList n, Object argu) {
      Type _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Type visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Type _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Type visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Type visit(NodeSequence n, Object argu) {
      Type _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Type visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public HashMap<String,Type> vartable = new HashMap<>(); 
   public boolean error = false; 
   /**
    * f0 -> ( DeclStatement() )*
    * f1 -> ( Statement() )*
    * f2 -> PrintStatment()
    * f3 -> <EOF>
    */
   public Type visit(Goal n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntDecl()
    *       | BoolDecl()
    */
   public Type visit(DeclStatement n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INT>
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Type visit(IntDecl n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      vartable.put(n.f1.f0.toString(),Type.INT);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <BOOL>
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Type visit(BoolDecl n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      vartable.put(n.f1.f0.toString(),Type.BOOL);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <PRINT>
    * f1 -> Identifier()
    */
   public Type visit(PrintStatment n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(!(vartable.containsKey(n.f1.f0.toString()))) error=true; 
      return _ret;
   }

   /**
    * f0 -> AssignmentStatement()
    */
   public Type visit(Statement n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Type visit(AssignmentStatement n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      Type expType = n.f2.accept(this, argu); 
      if(!(vartable.containsKey(n.f0.f0.toString()) && vartable.get(n.f0.f0.toString())==expType)) error=true; 
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PlusExpression()
    *       | MinusExpression()
    *       | GTExpression()
    *       | PrimaryExpression()
    */
   public Type visit(Expression n, Object argu) {
      Type _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Type visit(PlusExpression n, Object argu) {
      Type f0type = n.f0.accept(this, argu);
      n.f1.accept(this, argu); 
   
      Type f2type = n.f2.accept(this, argu); 

      if(f0type!=Type.INT||f2type!=Type.INT)error=true;
      return Type.INT;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Type visit(MinusExpression n, Object argu) {
      Type f0type = n.f0.accept(this, argu);
      n.f1.accept(this, argu); 
   
      Type f2type = n.f2.accept(this, argu); 

      if(f0type!=Type.INT||f2type!=Type.INT)error=true;
      return Type.INT; 
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> ">"
    * f2 -> PrimaryExpression()
    */
   public Type visit(GTExpression n, Object argu) {
      Type f0type = n.f0.accept(this, argu);
      n.f1.accept(this, argu); 
   
      Type f2type = n.f2.accept(this, argu); 

      if(f0type!=Type.INT||f2type!=Type.INT)error=true;
      return Type.BOOL; 
   }

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier()
    */
   public Type visit(PrimaryExpression n, Object argu) {
      Type _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Type visit(IntegerLiteral n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      return Type.INT; 
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Type visit(Identifier n, Object argu) {
      Type _ret=null;
      n.f0.accept(this, argu);
      if(!(vartable.containsKey(n.f0.toString())))error=true; 
      else _ret = vartable.get(n.f0.toString());
      return Type.INT;
   }

}
