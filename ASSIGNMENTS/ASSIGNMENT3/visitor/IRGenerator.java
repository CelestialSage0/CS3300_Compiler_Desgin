//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import visitor.SymbolTableBuilder.ClassInfo;
import visitor.SymbolTableBuilder.MethodInfo;
import visitor.SymbolTableBuilder.SymbolTable;
import visitor.VTableBuilder.ClassObject;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class IRGenerator implements GJVisitor<String, String> {
    SymbolTable ST;
    VTableBuilder vt;

    public IRGenerator(SymbolTable st, VTableBuilder vt) {
        this.ST = st;
        this.vt = vt;
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public String visit(NodeList n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, String argu) {
        if (n.present()) {
            String _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, String argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, String argu) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    int TempCnt = 0;
    int LabelCnt = 0;

    public void setTempCnt() {
        for (Map.Entry<String, ClassInfo> iterable : ST.classes.entrySet()) {
            for (Map.Entry<String, MethodInfo> iEntry : iterable.getValue().methods.entrySet()) {
                TempCnt = Math.max(TempCnt, iEntry.getValue().args.size());
            }
        }
        return;
    }

    public String newTemp() {
        return "TEMP " + (++TempCnt);
    }

    public String newLabel() {
        return "L" + (LabelCnt++);
    }

    String currClass = null;
    String currMethod = null;

    HashMap<String, String> tempMap = new HashMap<>();
    HashMap<String, String> typeMap = new HashMap<>();

    /**
     * f0 -> ( ImportFunction() )?
     * f1 -> MainClass()
     * f2 -> ( TypeDeclaration() )*
     * f3 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        String _ret = null;
        setTempCnt();
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "import"
     * f1 -> "java.util.function.Function"
     * f2 -> ";"
     */
    public String visit(ImportFunction n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    public String visit(MainClass n, String argu) {
        String _ret = null;
        System.out.println("MAIN");
        n.f0.accept(this, argu);
        currClass = n.f1.f0.toString();
        n.f2.accept(this, argu);
        currMethod = "main";
        tempMap = new HashMap<>();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        System.out.println("END");
        currMethod = null;
        currClass = null;
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currClass = n.f1.f0.toString();
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        // System.out.println(currClass);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        currClass = null;
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        currClass = n.f1.f0.toString();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        currClass = null;
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n, String argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        typeMap.put(n.f1.f0.toString(), type);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public String visit(MethodDeclaration n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        // System.out.println(currClass);
        currMethod = n.f2.f0.toString();
        int params = ST.classes.get(currClass).methods.get(currMethod).args.size() + 1;
        System.out.println(currClass + "_" + currMethod + " " + "[" + params + "]");
        tempMap = new HashMap<>();
        System.out.println("BEGIN");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        String exp = n.f10.accept(this, argu);
        System.out.println("RETURN " + exp);
        System.out.println("END");
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        currMethod = null;
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | Identifier()
     * | LambdaType()
     */
    public String visit(Type n, String argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return "int[]";
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return "boolean";
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return "int";
    }

    /**
     * f0 -> "Function"
     * f1 -> "<"
     * f2 -> Identifier()
     * f3 -> ","
     * f4 -> Identifier()
     * f5 -> ">"
     */
    public String visit(LambdaType n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     */
    public String visit(Statement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n, String argu) {
        String _ret = null;
        String var = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String exp = n.f2.accept(this, argu);
        System.out.println("MOVE " + var + " " + exp);
        n.f3.accept(this, argu);
        String curr_var = n.f0.f0.toString();
        if (ST.classes.get(currClass).fields.containsKey(curr_var)) {
            int offset = vt.getFieldOffset(currClass, curr_var);
            String addr = newTemp();
            System.out.println("MOVE " + addr + " PLUS TEMP 0 " + offset);
            System.out.println("HSTORE " + addr + " 0 " + var);
        }
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n, String argu) {
        String _ret = null;
        String var = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String idx = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String exp = n.f5.accept(this, argu);
        n.f6.accept(this, argu);

        String idxTemp = newTemp();
        String offset = newTemp();
        String addr = newTemp();

        System.out.println("MOVE " + idxTemp + " " + idx);
        System.out.println("MOVE " + idxTemp + " PLUS " + idxTemp + " 1");
        System.out.println("MOVE " + offset + " TIMES " + idxTemp + " 4");

        System.out.println("MOVE " + addr + " PLUS " + var + " " + offset);

        System.out.println("HSTORE " + addr + " 0" + " " + exp);
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n, String argu) {
        String _ret = null;
        String false_lbl = newLabel();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.println("CJUMP");
        System.out.println("BEGIN");
        String exp = n.f2.accept(this, argu);
        System.out.println("RETURN " + exp);
        System.out.println("END " + false_lbl);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        System.out.println(false_lbl + " NOOP");
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n, String argu) {
        String _ret = null;
        String false_lbl = newLabel();
        String end_lbl = newLabel();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.println("CJUMP");
        System.out.println("BEGIN");
        String exp = n.f2.accept(this, argu);
        System.out.println("RETURN " + exp);
        System.out.println("END " + false_lbl);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        System.out.println("JUMP " + end_lbl);
        n.f5.accept(this, argu);
        System.out.println(false_lbl + " NOOP");
        n.f6.accept(this, argu);
        System.out.println(end_lbl + " NOOP");
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n, String argu) {
        String _ret = null;
        String loop_lbl = newLabel();
        String end_lbl = newLabel();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.println(loop_lbl + " \tCJUMP ");
        System.out.println("BEGIN");
        String exp = n.f2.accept(this, argu);
        System.out.println("RETURN " + exp);
        System.out.println("END " + end_lbl);
        // System.out.println(end_lbl);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        System.out.println("JUMP " + loop_lbl);
        System.out.println(end_lbl + " NOOP");
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String exp = n.f2.accept(this, argu);
        System.out.println("PRINT " + exp);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | neqExpression()
     * | AddExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | LambdaExpression()
     * | PrimaryExpression()
     */
    public String visit(Expression n, String argu) {
        String a = n.f0.accept(this, argu);
        return a;
    }

    /**
     * f0 -> "("
     * f1 -> Identifier()
     * f2 -> ")"
     * f3 -> "->"
     * f4 -> Expression()
     */
    public String visit(LambdaExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public String visit(AndExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);

        String temp = newTemp();
        String true_lbl = newLabel();
        String false_lbl = newLabel();
        String endlbl = newLabel();

        // System.out.println("BEGIN");
        System.out.println("CJUMP " + a + " " + false_lbl);
        System.out.println("CJUMP " + b + " " + false_lbl);
        System.out.println("MOVE " + temp + " 1");
        System.out.println("JUMP " + endlbl);
        System.out.println(false_lbl + " NOOP");
        System.out.println("MOVE " + temp + " 0");
        System.out.println(endlbl + " NOOP");
        // System.out.println("RETURN " + temp);
        // System.out.println("END");
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "||"
     * f2 -> PrimaryExpression()
     */
    public String visit(OrExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);

        String temp = newTemp();
        String true_lbl = newLabel();
        String false_lbl = newLabel();
        String endlbl = newLabel();

        // System.out.println("BEGIN");
        System.out.println("CJUMP " + a + " " + false_lbl + "_1");
        System.out.println("JUMP " + true_lbl);
        System.out.println(false_lbl + "_2" + " CJUMP " + b + " " + false_lbl + "_2");
        System.out.println("JUMP " + true_lbl);
        System.out.println(true_lbl + " NOOP");
        System.out.println("MOVE " + temp + " 1");
        System.out.println("JUMP " + endlbl);
        System.out.println(false_lbl + "_2" + " NOOP");
        System.out.println("MOVE " + temp + " 0");
        System.out.println(endlbl + " NOOP");
        // System.out.println("RETURN " + temp);
        // System.out.println("END");

        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<="
     * f2 -> PrimaryExpression()
     */
    public String visit(CompareExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " LE " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "!="
     * f2 -> PrimaryExpression()
     */
    public String visit(neqExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " NE " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public String visit(AddExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " PLUS " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public String visit(MinusExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " MINUS " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public String visit(TimesExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " TIMES " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "/"
     * f2 -> PrimaryExpression()
     */
    public String visit(DivExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String b = n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("MOVE " + temp + " DIV " + a + " " + b);
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n, String argu) {
        String _ret = null;
        String arr = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String idx = n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        String idxTemp = newTemp();
        String offset = newTemp();
        String element = newTemp();
        System.out.println("MOVE " + idxTemp + " PLUS " + idx + " 1");
        System.out.println("MOVE " + offset + " TIMES " + idxTemp + " 4");

        String addr = newTemp();
        System.out.println("MOVE " + addr + " PLUS " + arr + " " + offset);
        System.out.println("HLOAD " + element + " " + addr + " 0");
        return element;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n, String argu) {
        String arr = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String temp = newTemp();
        System.out.println("HLOAD " + temp + " " + arr + " 0");
        return temp;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    ArrayList<String> args;

    private String getExpressionType(String tempOrId) {
        // Check if it's a class name
        if (ST.classes.containsKey(tempOrId)) {
            return tempOrId;
        }

        // Check if we have type info cached
        if (typeMap.containsKey(tempOrId)) {
            return typeMap.get(tempOrId);
        }

        // Look up in tempMap (reverse lookup)
        for (Map.Entry<String, String> entry : tempMap.entrySet()) {
            if (entry.getValue().equals(tempOrId)) {
                String identifier = entry.getKey();
                if (typeMap.containsKey(identifier)) {
                    return typeMap.get(identifier);
                }
            }
        }

        return null;
    }

    // FIXED MessageSend - Handle all cases
    public String visit(MessageSend n, String argu) {
        String _ret = null;
        String obj = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        args = new ArrayList<>();
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);

        // Get the type of the object
        String objType = getExpressionType(obj);

        // If still null, try to get from the primary expression directly
        if (objType == null) {
            // Check if obj is "TEMP 0" (this)
            if (obj.equals("TEMP 0")) {
                objType = currClass;
            } else {
                // Try to find the identifier from the original expression
                // This handles cases where we have a fresh allocation or complex expression
                objType = getTypeFromPrimaryExpression(n.f0);
            }
        }

        String ans = newTemp();
        System.out.println("MOVE " + ans + " CALL");
        System.out.println("BEGIN");

        // Load method
        String vtable = newTemp();
        String method = newTemp();
        System.out.println("HLOAD " + vtable + " " + obj + " 0");

        String addr = newTemp();
        System.out.println("MOVE " + addr + " PLUS " + vtable + " " + vt.getMethodOffset(objType, id));
        System.out.println("HLOAD " + method + " " + addr + " 0");

        // Return
        System.out.println("RETURN " + method);
        System.out.println("END");

        // args
        System.out.println("( " + obj);
        for (String arg : args) {
            System.out.println(arg);
        }
        System.out.println(")");

        // Cache the return type
        if (ST.classes.get(objType).methods.containsKey(id)) {
            String returnType = ST.classes.get(objType).methods.get(id).retType;
            typeMap.put(ans, returnType);
        }

        return ans;
    }

    // Helper to get type from a PrimaryExpression node
    private String getTypeFromPrimaryExpression(Node primaryExpr) {
        if (primaryExpr instanceof PrimaryExpression) {
            PrimaryExpression pe = (PrimaryExpression) primaryExpr;
            Node choice = pe.f0.choice;

            // Check if it's AllocationExpression
            if (choice instanceof AllocationExpression) {
                AllocationExpression alloc = (AllocationExpression) choice;
                return alloc.f1.f0.toString(); // Get the class name
            }

            // Check if it's ThisExpression
            if (choice instanceof ThisExpression) {
                return currClass;
            }

            // Check if it's an Identifier
            if (choice instanceof Identifier) {
                String id = ((Identifier) choice).f0.toString();

                // Look up in current method
                if (currMethod != null) {
                    MethodInfo currentMethod = ST.classes.get(currClass).methods.get(currMethod);

                    if (currentMethod.args.containsKey(id)) {
                        return currentMethod.args.get(id);
                    }
                    if (currentMethod.vars.containsKey(id)) {
                        return currentMethod.vars.get(id);
                    }
                }

                // Look up in class fields
                if (ST.classes.get(currClass).fields.containsKey(id)) {
                    return ST.classes.get(currClass).fields.get(id);
                }
            }
        }

        return null;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public String visit(ExpressionList n, String argu) {
        String _ret = null;
        String exp = n.f0.accept(this, argu);
        args.add(exp);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public String visit(ExpressionRest n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String exp = n.f1.accept(this, argu);
        args.add(exp);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     * | BracketExpression()
     */
    public String visit(PrimaryExpression n, String argu) {
        String a = n.f0.accept(this, argu);
        return a;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        return n.f0.toString();
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n, String argu) {
        n.f0.accept(this, argu);
        return "1";
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n, String argu) {
        n.f0.accept(this, argu);
        return "0";
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n, String argu) {
        String id = n.f0.toString();

        if (ST.classes.containsKey(id)) {
            return id;
        }

        // methods
        if (currClass != null && vt.getFieldOffset(currClass, id) != -1) {
            if (tempMap.containsKey(id)) {
                return tempMap.get(id);
            }
            String temp = newTemp();
            int offset = vt.getFieldOffset(currClass, id);
            String type = ST.classes.get(currClass).fields.get(id);
            typeMap.put(id, type);
            // typeMap.put(temp, type);
            if (currMethod != null) {
                String addr = newTemp();
                System.out.println("MOVE " + addr + " PLUS TEMP 0 " + offset);
                System.out.println("HLOAD " + temp + " " + addr + " 0");
            }
            return temp;
        }

        // method variables
        if (currMethod != null) {
            MethodInfo currentMethod = ST.classes.get(currClass).methods.get(currMethod);

            int param = 1;
            for (String paramName : currentMethod.args.keySet()) {
                if (paramName.equals(id)) {
                    tempMap.put(paramName, "TEMP " + param);
                    String type = currentMethod.args.get(paramName);
                    typeMap.put(paramName, type);
                    // typeMap.put("TEMP " + param, type);
                    return "TEMP " + param;
                }
                param++;
            }

            if (currentMethod.vars.containsKey(id)) {
                if (tempMap.containsKey(id)) {
                    return tempMap.get(id);
                }
                String temp = newTemp();
                tempMap.put(id, temp);
                String type = currentMethod.vars.get(id);
                typeMap.put(id, type);
                // typeMap.put(temp, type);
                return temp;
            }
        }

        return id;
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n, String argu) {
        n.f0.accept(this, argu);
        tempMap.put(currClass, "TEMP 0");
        typeMap.put("TEMP 0", currClass);
        typeMap.put(currClass, currClass);
        return "TEMP 0";
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String size = n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        String bytes = newTemp();
        String arr = newTemp();

        System.out.println("MOVE " + bytes + " " + size);
        System.out.println("MOVE " + bytes + " PLUS " + size + " 1");
        System.out.println("MOVE " + bytes + " TIMES " + bytes + " 4");

        System.out.println("MOVE " + arr + " HALLOCATE " + bytes);

        System.out.println("HSTORE " + arr + " 0 " + size);
        return arr;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String var = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        String tempClass = newTemp();
        ClassObject classObject = vt.ClassObjects.get(var);

        System.out.println("MOVE " + tempClass);
        System.out.println("BEGIN");

        // Object allocation
        String obj = newTemp();
        System.out.println("MOVE " + obj + " HALLOCATE " + (classObject.fields.size() + 1) * 4);

        // VTable allocation
        String vtable = newTemp();
        System.out.println("MOVE " + vtable + " HALLOCATE " + (classObject.methods.size() * 4));

        // storing Methods
        int i = 0;
        for (String method : classObject.methods.keySet()) {
            System.out.println("HSTORE " + vtable + " " + i + " " + var + "_" + method);
            i += 4;
        }

        // initializing fields
        for (int j = 4; j < classObject.fields.size(); j += 4) {
            System.out.println("HSTORE " + obj + " " + j + " 0");
        }

        // Storing vtable
        System.out.println("HSTORE " + obj + " 0 " + vtable);

        System.out.println("RETURN " + obj);
        System.out.println("END");

        tempMap.put(var, tempClass);
        return tempClass;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public String visit(NotExpression n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String exp = n.f1.accept(this, argu);

        String end_lbl = newLabel();
        String true_lbl = newLabel();
        String temp = newTemp();

        System.out.println("CJUMP " + exp + true_lbl);
        System.out.println("MOVE " + temp + " 0");
        System.out.println("JUMP " + end_lbl);
        System.out.println(true_lbl + "\tNOOP");
        System.out.println("MOVE " + temp + " 1");
        System.out.println("JUMP " + end_lbl);
        System.out.println(end_lbl + "\tNOOP");

        return temp;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public String visit(BracketExpression n, String argu) {
        n.f0.accept(this, argu);
        String exp = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return exp;
    }

}
