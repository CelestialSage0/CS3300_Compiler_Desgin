//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class LivenessAnalysis implements GJVisitor<String, String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, String argu) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n, String argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public String visit(NodeSequence n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, String argu) {
      return null;
   }

   // Structure to record TEMP intervals for a procedure
   public static class TempInterval {
      public String tempId;
      public int firstUse = Integer.MAX_VALUE;
      public int lastUse = Integer.MIN_VALUE;
      public int definition = -1;

      public TempInterval(String tempId) {
         this.tempId = tempId;
      }
   }

   // Structure to store intervals for each procedure
   public static class ProcedureIntervals {
      public String procedureName;
      public Map<String, TempInterval> tempIntervals = new HashMap<>();

      public ProcedureIntervals(String name) {
         this.procedureName = name;
      }
   }

   public Map<String, ProcedureIntervals> procedureIntervals = new HashMap<>();
   public ProcedureIntervals currProcedure = null;
   public int currPos = 1;

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, String argu) {
      String _ret = null;
      currProcedure = new ProcedureIntervals("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      procedureIntervals.put("MAIN", currProcedure);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, String argu) {
      String _ret = null;
      String proc = n.f0.accept(this, argu);
      currPos = 1;
      currProcedure = new ProcedureIntervals(proc);
      n.f1.accept(this, argu);
      String str = n.f2.accept(this, argu);
      int params = Integer.parseInt(str);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      procedureIntervals.put(proc, currProcedure);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    * | ErrorStmt()
    * | CJumpStmt()
    * | JumpStmt()
    * | HStoreStmt()
    * | HLoadStmt()
    * | MoveStmt()
    * | PrintStmt()
    */
   public String visit(Stmt n, String argu) {
      String _ret = null;
      currPos++;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      TempInterval interval;
      if (currProcedure.tempIntervals.containsKey(temp)) {
         interval = currProcedure.tempIntervals.get(temp);
      } else {
         interval = new TempInterval(temp);
         currProcedure.tempIntervals.put(temp, interval);
      }
      interval.definition = currPos;
      interval.firstUse = Math.min(interval.firstUse, currPos);
      interval.lastUse = currPos;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      TempInterval interval;
      if (currProcedure.tempIntervals.containsKey(temp)) {
         interval = currProcedure.tempIntervals.get(temp);
      } else {
         interval = new TempInterval(temp);
         currProcedure.tempIntervals.put(temp, interval);

      }
      interval.definition = currPos;
      interval.firstUse = Math.min(interval.firstUse, currPos);
      interval.lastUse = currPos;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    * | HAllocate()
    * | BinOp()
    * | SimpleExp()
    */
   public String visit(Exp n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public String visit(Call n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      TempInterval interval;
      if (currProcedure.tempIntervals.containsKey(temp)) {
         interval = currProcedure.tempIntervals.get(temp);
      } else {
         interval = new TempInterval(temp);
         currProcedure.tempIntervals.put(temp, interval);
      }
      interval.definition = currPos;
      interval.firstUse = Math.min(interval.firstUse, currPos);
      interval.lastUse = currPos;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    * | "NE"
    * | "PLUS"
    * | "MINUS"
    * | "TIMES"
    * | "DIV"
    */
   public String visit(Operator n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    * | IntegerLiteral()
    * | Label()
    */
   public String visit(SimpleExp n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String id = n.f1.accept(this, argu);
      String temp = "TEMP " + id;
      TempInterval interval;
      if (currProcedure.tempIntervals.containsKey(temp)) {
         interval = currProcedure.tempIntervals.get(temp);
         currProcedure.tempIntervals.put(temp, interval);
      } else {
         interval = new TempInterval(temp);
      }
      interval.firstUse = Math.min(interval.firstUse, currPos);
      interval.lastUse = currPos;
      return temp;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
