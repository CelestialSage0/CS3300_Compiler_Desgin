//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class temp implements GJVisitor<String, String> {

    // Structure to record TEMP intervals for a procedure
    public static class TempInterval {
        public int tempId;
        public int firstUse = Integer.MAX_VALUE;
        public int lastUse = Integer.MIN_VALUE;
        public int definition = -1;

        public TempInterval(int tempId) {
            this.tempId = tempId;
        }

        @Override
        public String toString() {
            return String.format("TEMP %d: firstUse=%d, lastUse=%d, definition=%d",
                    tempId, firstUse, lastUse, definition);
        }
    }

    // Structure to store intervals for each procedure
    public static class ProcedureIntervals {
        public String procedureName;
        public Map<Integer, TempInterval> tempIntervals = new HashMap<>();
        public int statementCount = 0;

        public ProcedureIntervals(String name) {
            this.procedureName = name;
        }

        public void printIntervals() {
            System.out.println("Procedure: " + procedureName);
            System.out.println("Total statements: " + statementCount);
            for (TempInterval interval : tempIntervals.values()) {
                System.out.println("  " + interval);
            }
            System.out.println();
        }
    }

    // Map to store intervals for each procedure
    private Map<String, ProcedureIntervals> procedureIntervals = new HashMap<>();
    private ProcedureIntervals currentProcedure = null;
    private int currentPosition = 0;

    // Getter for the procedure intervals
    public Map<String, ProcedureIntervals> getProcedureIntervals() {
        return procedureIntervals;
    }

    // Helper method to record TEMP usage
    private void recordTempUse(int tempId) {
        if (currentProcedure != null) {
            TempInterval interval = currentProcedure.tempIntervals.computeIfAbsent(tempId,
                    k -> new TempInterval(tempId));
            interval.firstUse = Math.min(interval.firstUse, currentPosition);
            interval.lastUse = Math.max(interval.lastUse, currentPosition);
        }
    }

    // Helper method to record TEMP definition
    private void recordTempDef(int tempId) {
        if (currentProcedure != null) {
            TempInterval interval = currentProcedure.tempIntervals.computeIfAbsent(tempId,
                    k -> new TempInterval(tempId));
            interval.definition = currentPosition;
            // Also update first/last use if this is the first occurrence
            interval.firstUse = Math.min(interval.firstUse, currentPosition);
            interval.lastUse = Math.max(interval.lastUse, currentPosition);
        }
    }

    // Method to increment position (call this at appropriate points in your
    // traversal)
    private void incrementPosition() {
        currentPosition++;
        if (currentProcedure != null) {
            currentProcedure.statementCount++;
        }
    }

    // Method to start a new procedure
    private void startProcedure(String procedureName) {
        currentProcedure = new ProcedureIntervals(procedureName);
        procedureIntervals.put(procedureName, currentProcedure);
        currentPosition = 0;
    }

    // Method to end current procedure
    private void endProcedure() {
        if (currentProcedure != null) {
            currentProcedure = null;
        }
    }

    // Method to print all intervals for all procedures
    public void printAllIntervals() {
        System.out.println("=== TEMP Intervals for All Procedures ===");
        for (ProcedureIntervals procIntervals : procedureIntervals.values()) {
            procIntervals.printIntervals();
        }
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public String visit(NodeList n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, String argu) {
        if (n.present()) {
            String _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, String argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, String argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, String argu) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public String visit(Goal n, String argu) {
        String _ret = null;

        // Analyze MAIN procedure first
        startProcedure("MAIN");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        endProcedure();

        // Analyze all other procedures
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        // Print all intervals after analysis
        printAllIntervals();
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public String visit(StmtList n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public String visit(Procedure n, String argu) {
        String _ret = null;

        // Get procedure name from the label
        String procName = n.f0.f0.tokenImage;
        startProcedure(procName);

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        endProcedure();
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     * | ErrorStmt()
     * | CJumpStmt()
     * | JumpStmt()
     * | HStoreStmt()
     * | HLoadStmt()
     * | MoveStmt()
     * | PrintStmt()
     */
    public String visit(Stmt n, String argu) {
        incrementPosition(); // Increment position for each statement
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public String visit(NoOpStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // TEMP used in condition
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public String visit(HStoreStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Base address TEMP (use)
        n.f2.accept(this, argu);
        n.f3.accept(this, argu); // Value TEMP (use)
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Destination TEMP (definition)
        recordTempDef(Integer.parseInt(n.f1.f1.f0.tokenImage));
        n.f2.accept(this, argu); // Base address TEMP (use)
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Destination TEMP (definition)
        recordTempDef(Integer.parseInt(n.f1.f1.f0.tokenImage));
        n.f2.accept(this, argu); // Source expression (may contain TEMP uses)
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // TEMP or literal to print (use)
        return _ret;
    }

    /**
     * f0 -> Call()
     * | HAllocate()
     * | BinOp()
     * | SimpleExp()
     */
    public String visit(Exp n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public String visit(StmtExp n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu); // Return value (use)
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public String visit(Call n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Function address (use)
        n.f2.accept(this, argu);
        n.f3.accept(this, argu); // Argument TEMPs (uses)
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public String visit(HAllocate n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Size expression (use)
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public String visit(BinOp n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu); // Destination TEMP (definition)
        recordTempDef(Integer.parseInt(n.f1.f1.f0.tokenImage));
        n.f2.accept(this, argu); // Source operand (use)
        return _ret;
    }

    /**
     * f0 -> "LE"
     * | "NE"
     * | "PLUS"
     * | "MINUS"
     * | "TIMES"
     * | "DIV"
     */
    public String visit(Operator n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Temp()
     * | IntegerLiteral()
     * | Label()
     */
    public String visit(SimpleExp n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public String visit(Temp n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        int tempId = Integer.parseInt(n.f1.f0.tokenImage);
        recordTempUse(tempId);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n, String argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }
}