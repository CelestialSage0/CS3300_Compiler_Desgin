//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import visitor.SymbolTableBuilder.ClassInfo;
import visitor.SymbolTableBuilder.MethodInfo;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class TypeChecker implements GJVisitor<String, TypeChecker.Scope> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public String visit(NodeList n, Scope argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n, Scope argu) {
        String _ret = null;
        if (n.present()) {

            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n, Scope argu) {
        if (n.present())
            return n.node.accept(this, argu);
        else
            return null;
    }

    public String visit(NodeSequence n, Scope argu) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n, Scope argu) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    public class SymbolError extends RuntimeException {
        public SymbolError(String message) {
            super(message);
        }
    }

    public class TypeError extends RuntimeException {
        public TypeError(String message) {
            super(message);
        }
    }

    public static SymbolTableBuilder.SymbolTable ST;

    public static class Scope {
        SymbolTableBuilder.ClassInfo currClass;
        SymbolTableBuilder.MethodInfo currMethod;
        Stack<HashMap<String, String>> currVars;
        boolean inMethod;

        public Scope(SymbolTableBuilder.SymbolTable ST) {
            TypeChecker.ST = ST;
            inMethod = false;
            currVars = new Stack<>();
        }

        public void flush() {
            this.currClass = null;
            this.currMethod = null;
            return;
        }

        public void addVars(ClassInfo c1) {
            HashMap<String, String> m;
            if (currVars.empty()) {
                m = new HashMap<>();
            } else {
                m = new HashMap<>(currVars.peek());
            }
            for (Map.Entry<String, String> i : c1.fields.entrySet()) {
                m.put(i.getKey(), i.getValue());
            }
            ClassInfo parentClass = ST.classes.get(c1.parent);
            while (parentClass != null) {
                for (Map.Entry<String, String> i : parentClass.fields.entrySet()) {
                    m.put(i.getKey(), i.getValue());
                }
                parentClass = ST.classes.get(parentClass.parent);
            }
            currVars.push(m);
            return;
        }

        public void addVars(MethodInfo m1) {
            HashMap<String, String> m;
            if (currVars.empty()) {
                m = new HashMap<>();
            } else {
                m = new HashMap<>(currVars.peek());
            }
            for (Map.Entry<String, String> i : m1.args.entrySet()) {
                m.put(i.getKey(), i.getValue());
            }
            for (Map.Entry<String, String> i : m1.vars.entrySet()) {
                m.put(i.getKey(), i.getValue());
            }
            currVars.push(m);
            return;
        }
    }

    public Scope currScope;

    public TypeChecker(SymbolTableBuilder.SymbolTable ST) {
        this.currScope = new Scope(ST);
    }

    private boolean isSubtype(String type1, String type2) {
        if (type1 == null || type2 == null)
            return false;
        if (type1.equals(type2))
            return true;

        if (ST.classes.containsKey(type1) && ST.classes.containsKey(type2)) {
            ClassInfo c1 = ST.classes.get(type1);

            String parent = c1.parent;
            while (parent != null) {
                if (parent.equals(type2))
                    return true;
                ClassInfo parentInfo = ST.classes.get(parent);
                if (parentInfo == null)
                    break;
                parent = parentInfo.parent;
            }
            return false;
        }

        return false;
    }

    private String getVarType(String var) {
        if (currScope.currVars.peek().containsKey(var)) {
            return currScope.currVars.peek().get(var);
        }
        if (ST.classes.containsKey(var)) {
            return var; // Class type
        }
        return null;
    }

    /**
     * f0 -> ( ImportFunction() )?
     * f1 -> MainClass()
     * f2 -> ( TypeDeclaration() )*
     * f3 -> <EOF>
     */
    public String visit(Goal n, Scope argu) {
        String _ret = null;
        HashMap<String, String> m = new HashMap<>();
        m.put("int", "int");
        m.put("boolean", "boolean");
        m.put("int[]", "int[]");
        currScope.currVars.add(m);
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "import"
     * f1 -> "java.util.function.Function"
     * f2 -> ";"
     */
    public String visit(ImportFunction n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    public String visit(MainClass n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String name = n.f1.accept(this, argu);
        currScope.currClass = ST.classes.get(name);
        currScope.addVars(currScope.currClass);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        String meth_name = "main";
        currScope.currMethod = currScope.currClass.methods.get(meth_name);
        currScope.addVars(currScope.currMethod);
        currScope.inMethod = true;
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        currScope.currVars.pop();
        currScope.inMethod = false;
        n.f16.accept(this, argu);
        currScope.currVars.pop();
        currScope.flush();
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String name = n.f1.accept(this, argu);
        currScope.currClass = ST.classes.get(name);
        currScope.addVars(currScope.currClass);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        currScope.inMethod = true;
        n.f4.accept(this, argu);
        currScope.inMethod = false;
        n.f5.accept(this, argu);
        currScope.currVars.pop();
        currScope.flush();
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String child = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String parent = n.f3.accept(this, argu);
        currScope.currClass = ST.classes.get(child);
        currScope.addVars(currScope.currClass);
        if (!ST.classes.containsKey(parent)) {
            throw new SymbolError("Symbol not found");
        }
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        currScope.inMethod = true;
        n.f6.accept(this, argu);
        currScope.inMethod = false;
        n.f7.accept(this, argu);
        currScope.currVars.pop();
        currScope.flush();
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n, Scope argu) {
        String type = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public String visit(MethodDeclaration n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String retType = n.f1.accept(this, argu);
        String name = n.f2.accept(this, argu);
        currScope.currMethod = currScope.currClass.methods.get(name);
        currScope.addVars(currScope.currMethod);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        String type = n.f10.accept(this, argu);
        if (!isSubtype(type, retType)) {
            throw new TypeError("Type error");
        }
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        currScope.currVars.pop();
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n, Scope argu) {
        String type = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return type;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | Identifier()
     * | LambdaType()
     */
    public String visit(Type n, Scope argu) {
        String type = n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n, Scope argu) {
        // String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return "int[]";
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n, Scope argu) {
        // String _ret = null;
        n.f0.accept(this, argu);
        return "boolean";
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n, Scope argu) {
        // String _ret = null;
        n.f0.accept(this, argu);
        return "int";
    }

    /**
     * f0 -> "Function"
     * f1 -> "<"
     * f2 -> Identifier()
     * f3 -> ","
     * f4 -> Identifier()
     * f5 -> ">"
     */
    public String visit(LambdaType n, Scope argu) {
        // String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String type1 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        String type2 = n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        if (!currScope.currVars.peek().containsKey(type1)) {
            throw new SymbolError("Symbol not found");
        }
        if (!currScope.currVars.peek().containsKey(type2)) {
            throw new SymbolError("Symbol not found");
        }
        return "Function<" + type1 + "," + type2 + ">";
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     */
    public String visit(Statement n, Scope argu) {
        String type = n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n, Scope argu) {
        String _ret = null;
        String var = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String type = n.f2.accept(this, argu);
        String varType = getVarType(var);
        if (varType == null) {
            throw new SymbolError("Symbol not found");
        }
        if (!isSubtype(type, varType)) {
            throw new TypeError("Type error");
        }
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n, Scope argu) {
        String _ret = null;
        String var = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr_type = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String rhs_type = n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        String varType = getVarType(var);
        if (varType == null) {
            throw new SymbolError("Symbol not found");
        }
        if (!expr_type.equals("int") || !rhs_type.equals("int") || !varType.equals("int[]")) {
            throw new TypeError("Type error");
        }
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String type = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if (!type.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String type = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        if (!type.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String type = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if (!type.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | neqExpression()
     * | AddExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | LambdaExpression()
     * | PrimaryExpression()
     */
    public String visit(Expression n, Scope argu) {
        String type = n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> "("
     * f1 -> Identifier()
     * f2 -> ")"
     * f3 -> "->"
     * f4 -> Expression()
     */
    public String visit(LambdaExpression n, Scope argu) {
        n.f0.accept(this, argu);
        String var = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        String type = n.f4.accept(this, argu);
        // Lambda expression type checking would need more context
        // This is simplified for now
        return "Function<" + var + "," + type + ">";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public String visit(AndExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("boolean") || !expr2.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return "boolean";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "||"
     * f2 -> PrimaryExpression()
     */
    public String visit(OrExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("boolean") || !expr2.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return "boolean";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<="
     * f2 -> PrimaryExpression()
     */
    public String visit(CompareExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "boolean";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "!="
     * f2 -> PrimaryExpression()
     */
    public String visit(neqExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "boolean";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public String visit(AddExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public String visit(MinusExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public String visit(TimesExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "/"
     * f2 -> PrimaryExpression()
     */
    public String visit(DivExpression n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        if (!expr1.equals("int") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n, Scope argu) {
        String expr1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String expr2 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        if (!expr1.equals("int[]") || !expr2.equals("int")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n, Scope argu) {
        String type = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if (!type.equals("int[]")) {
            throw new TypeError("Type error");
        }
        return "int";
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public Queue<String> params;

    public String visit(MessageSend n, Scope argu) {
        params = new LinkedList<>();
        String className = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String methName = n.f2.accept(this, argu);

        // Get the actual type of the object
        String objectType = getVarType(className);
        if (objectType == null) {
            objectType = className; // Might be a class name directly
        }

        if (!ST.classes.containsKey(objectType)) {
            throw new SymbolError("Symbol not found");
        }

        ClassInfo classInfo = ST.classes.get(objectType);

        // Look for method in current class and parent classes
        MethodInfo meth = null;
        ClassInfo currentClass = classInfo;
        while (currentClass != null && meth == null) {
            if (currentClass.methods.containsKey(methName)) {
                meth = currentClass.methods.get(methName);
                break;
            }
            if (currentClass.parent != null) {
                currentClass = ST.classes.get(currentClass.parent);
            } else {
                currentClass = null;
            }
        }

        if (meth == null) {
            throw new SymbolError("Symbol not found");
        }

        n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        // Check parameter types
        List<String> expectedTypes = new ArrayList<>();
        for (Map.Entry<String, String> entry : meth.args.entrySet()) {
            expectedTypes.add(entry.getValue());
        }

        if (params.size() != expectedTypes.size()) {
            throw new TypeError("Type error");
        }

        int i = 0;
        for (String paramType : params) {
            if (!isSubtype(paramType, expectedTypes.get(i))) {
                throw new TypeError("Type error");
            }
            i++;
        }

        n.f5.accept(this, argu);
        return meth.retType;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public String visit(ExpressionList n, Scope argu) {
        String _ret = null;
        String type = n.f0.accept(this, argu);
        params.add(type);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public String visit(ExpressionRest n, Scope argu) {
        String _ret = null;
        n.f0.accept(this, argu);
        String type = n.f1.accept(this, argu);
        params.add(type);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     * | BracketExpression()
     */
    public String visit(PrimaryExpression n, Scope argu) {
        String type = n.f0.accept(this, argu);
        return type;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, Scope argu) {
        n.f0.accept(this, argu);
        return "int";
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n, Scope argu) {
        n.f0.accept(this, argu);
        return "boolean";
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n, Scope argu) {
        n.f0.accept(this, argu);
        return "boolean";
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n, Scope argu) {
        String var = n.f0.toString();
        String varType = getVarType(var);
        if (varType != null) {
            return varType;
        }
        return var; // Return the identifier name itself for further processing
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n, Scope argu) {
        n.f0.accept(this, argu);
        return currScope.currClass.name;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n, Scope argu) {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String type = n.f3.accept(this, argu);
        if (!type.equals("int")) {
            throw new TypeError("Type error");
        }
        n.f4.accept(this, argu);
        return "int[]";
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n, Scope argu) {
        n.f0.accept(this, argu);
        String type = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        if (!ST.classes.containsKey(type)) {
            throw new SymbolError("Symbol not found");
        }
        return type;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public String visit(NotExpression n, Scope argu) {
        n.f0.accept(this, argu);
        String type = n.f1.accept(this, argu);
        if (!type.equals("boolean")) {
            throw new TypeError("Type error");
        }
        return "boolean";
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public String visit(BracketExpression n, Scope argu) {
        n.f0.accept(this, argu);
        String type = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return type;
    }

}