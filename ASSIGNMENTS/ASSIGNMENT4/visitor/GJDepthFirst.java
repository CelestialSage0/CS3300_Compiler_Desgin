//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.lang.reflect.Array;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJDepthFirst implements GJVisitor<String, String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, String argu) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n, String argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public String visit(NodeSequence n, String argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, String argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //
   Stack<String> labels = new Stack<>();
   public boolean inCall = false;
   public String params = "";

   int TempCnt = 0;
   int LabelCnt = 0;

   public void setTempCnt() {
      TempCnt = 1000;
      LabelCnt = 1000;
   }

   public String newTemp() {
      return "TEMP " + (++TempCnt);
   }

   public String newLabel() {
      return "L" + (LabelCnt++);
   }

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, String argu) {
      String _ret = null;
      setTempCnt();
      n.f0.accept(this, argu);
      System.out.println("MAIN");
      n.f1.accept(this, argu);
      System.out.println("END");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, String argu) {
      String _ret = null;
      for (Enumeration<Node> e = n.f0.elements(); e.hasMoreElements();) {
         NodeSequence seq = (NodeSequence) e.nextElement();

         // Handle optional label
         NodeOptional labelOpt = (NodeOptional) seq.elementAt(0);
         if (labelOpt.present()) {
            String label = labelOpt.accept(this, argu);
            System.out.println(label);
         }

         // Handle statement
         Stmt stmt = (Stmt) seq.elementAt(1);
         stmt.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, String argu) {
      String _ret = null;
      String lbl = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(lbl + " [" + id + "]");
      System.out.println("BEGIN");
      String exp = n.f4.accept(this, argu);
      System.out.println("RETURN " + exp);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    * | ErrorStmt()
    * | CJumpStmt()
    * | JumpStmt()
    * | HStoreStmt()
    * | HLoadStmt()
    * | MoveStmt()
    * | PrintStmt()
    */
   public String visit(Stmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      // labels.pop();
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      // labels.pop();
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String exp = n.f1.accept(this, argu);
      String lbl = n.f2.accept(this, argu);
      System.out.println("CJUMP " + exp + " " + lbl);
      labels.push(lbl);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String lbl = n.f1.accept(this, argu);
      System.out.println("JUMP " + lbl);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public String visit(HStoreStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String exp1 = n.f1.accept(this, argu);
      String id = n.f2.accept(this, argu);
      String exp2 = n.f3.accept(this, argu);
      String temp = newTemp();
      System.out.println("MOVE " + temp + " " + exp2);
      System.out.println("HSTORE " + exp1 + " " + id + " " + temp);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      String exp = n.f2.accept(this, argu);
      String id = n.f3.accept(this, argu);
      System.out.println("HLOAD " + temp + " " + exp + " " + id);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      String exp = n.f2.accept(this, argu);
      System.out.println("MOVE " + temp + " " + exp);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public String visit(PrintStmt n, String argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      String exp = n.f1.accept(this, argu);
      System.out.println("PRINT " + exp);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    * | Call()
    * | HAllocate()
    * | BinOp()
    * | Temp()
    * | IntegerLiteral()
    * | Label()
    */
   public String visit(Exp n, String argu) {
      String exp = n.f0.accept(this, argu);
      return exp;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, String argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exp = n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return exp;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */

   public String visit(Call n, String argu) {
      inCall = true;
      StringBuilder paramsBuilder = new StringBuilder();

      n.f0.accept(this, argu);
      String exp = n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // Process parameters and ensure they are temps
      if (n.f3.present()) {
         for (Enumeration<Node> e = n.f3.elements(); e.hasMoreElements();) {
            String param = e.nextElement().accept(this, argu);
            // If parameter is not a temp, create one
            if (!param.startsWith("TEMP")) {
               String temp = newTemp();
               System.out.println("MOVE " + temp + " " + param);
               paramsBuilder.append(temp).append(" ");
            } else {
               paramsBuilder.append(param).append(" ");
            }
         }
      }

      n.f4.accept(this, argu);

      String temp = newTemp();
      System.out.println("MOVE " + temp + " CALL " + exp + "(" + paramsBuilder.toString().trim() + ")");
      inCall = false;
      return temp;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public String visit(HAllocate n, String argu) {
      String temp = newTemp();
      n.f0.accept(this, argu);
      String exp = n.f1.accept(this, argu);
      System.out.println("MOVE " + temp + " HALLOCATE " + exp);
      if (inCall)
         params += (temp + " ");
      return temp;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public String visit(BinOp n, String argu) {
      String temp = newTemp();
      String op = n.f0.accept(this, argu);
      String exp1 = n.f1.accept(this, argu);
      String exp2 = n.f2.accept(this, argu);
      String newTemp = newTemp();
      System.out.println("MOVE " + newTemp + " " + exp1);
      System.out.println("MOVE " + temp + " " + op + " " + newTemp + " " + exp2);
      if (inCall)
         params += (temp + " ");
      return temp;
   }

   /**
    * f0 -> "LE"
    * | "NE"
    * | "PLUS"
    * | "MINUS"
    * | "TIMES"
    * | "DIV"
    */
   public String visit(Operator n, String argu) {
      n.f0.accept(this, argu);
      String[] arr = { "LE", "NE", "PLUS", "MINUS", "TIMES", "DIV" };
      int x = n.f0.which;
      return arr[x];
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, String argu) {
      String id = n.f1.accept(this, argu);
      return "TEMP " + id;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      String id = n.f0.toString();
      return id;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, String argu) {
      String id = n.f0.toString();
      return id;
   }

}